import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from factor_analyzer import FactorAnalyzer, calculate_bartlett_sphericity, calculate_kmo
from factor_analyzer.rotator import Rotator
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .metric-container {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

class FactorAnalysisApp:
    def __init__(self):
        self.data = None
        self.cleaned_data = None
        self.factor_analyzer = None
        self.pca_model = None
        self.scaler = StandardScaler()
        
    def load_data(self, uploaded_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if uploaded_file.name.endswith('.csv'):
                self.data = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(('.xlsx', '.xls')):
                self.data = pd.read_excel(uploaded_file)
            else:
                st.error("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV –∏ Excel")
                return False
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return False
    
    def clean_data(self, columns_to_use, missing_strategy='mean', normalize=True):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            numeric_data = self.data[columns_to_use].select_dtypes(include=[np.number])
            
            if numeric_data.empty:
                st.error("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            if missing_strategy == 'mean':
                imputer = SimpleImputer(strategy='mean')
            elif missing_strategy == 'median':
                imputer = SimpleImputer(strategy='median')
            elif missing_strategy == 'drop':
                numeric_data = numeric_data.dropna()
                if normalize:
                    numeric_data = pd.DataFrame(
                        self.scaler.fit_transform(numeric_data),
                        columns=numeric_data.columns,
                        index=numeric_data.index
                    )
                self.cleaned_data = numeric_data
                return True
            
            imputed_data = imputer.fit_transform(numeric_data)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if normalize:
                scaled_data = self.scaler.fit_transform(imputed_data)
                self.cleaned_data = pd.DataFrame(
                    scaled_data, 
                    columns=numeric_data.columns,
                    index=numeric_data.index
                )
            else:
                self.cleaned_data = pd.DataFrame(
                    imputed_data,
                    columns=numeric_data.columns,
                    index=numeric_data.index
                )
            
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False
    
    def check_factor_analysis_suitability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –¢–µ—Å—Ç –ë–∞—Ä—Ç–ª–µ—Ç—Ç–∞
            chi_square, p_value = calculate_bartlett_sphericity(self.cleaned_data)
            
            # –¢–µ—Å—Ç KMO
            kmo_all, kmo_model = calculate_kmo(self.cleaned_data)
            
            return {
                'bartlett_chi2': chi_square,
                'bartlett_p': p_value,
                'kmo_model': kmo_model,
                'kmo_variables': kmo_all
            }
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏: {str(e)}")
            return None
    
    def correlation_matrix(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        return self.cleaned_data.corr()
    
    def perform_pca(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
        try:
            self.pca_model = PCA()
            self.pca_model.fit(self.cleaned_data)
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ PCA: {str(e)}")
            return False
    
    def perform_factor_analysis(self, n_factors, method='principal', rotation='varimax'):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if method == 'principal':
                self.factor_analyzer = FactorAnalyzer(
                    n_factors=n_factors,
                    rotation=rotation,
                    method='principal'
                )
            else:
                self.factor_analyzer = FactorAnalyzer(
                    n_factors=n_factors,
                    rotation=rotation,
                    method='ml'
                )
            
            self.factor_analyzer.fit(self.cleaned_data)
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return False
    
    def get_eigenvalues(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if self.pca_model is not None:
            return self.pca_model.explained_variance_
        return None
    
    def plot_scree(self):
        """–ì—Ä–∞—Ñ–∏–∫ Scree plot"""
        if self.pca_model is None:
            return None
        
        eigenvalues = self.pca_model.explained_variance_
        components = range(1, len(eigenvalues) + 1)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=list(components),
            y=eigenvalues,
            mode='lines+markers',
            line=dict(width=2),
            marker=dict(size=8),
            name='–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'
        ))
        
        # –õ–∏–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è –ö–∞–π–∑–µ—Ä–∞ (eigenvalue = 1)
        fig.add_hline(y=1, line_dash="dash", line_color="red", 
                     annotation_text="–ö—Ä–∏—Ç–µ—Ä–∏–π –ö–∞–π–∑–µ—Ä–∞ (Œª=1)")
        
        fig.update_layout(
            title='Scree Plot - –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
            xaxis_title='–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
            yaxis_title='–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
            height=500,
            showlegend=True
        )
        
        return fig
    
    def plot_factor_loadings(self):
        """–ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"""
        if self.factor_analyzer is None:
            return None
        
        loadings = self.factor_analyzer.loadings_
        variables = self.cleaned_data.columns
        n_factors = loadings.shape[1]
        
        fig = go.Figure()
        
        for i in range(n_factors):
            fig.add_trace(go.Bar(
                name=f'–§–∞–∫—Ç–æ—Ä {i+1}',
                x=variables,
                y=loadings[:, i],
                opacity=0.8
            ))
        
        fig.update_layout(
            title='–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
            xaxis_title='–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            yaxis_title='–ù–∞–≥—Ä—É–∑–∫–∞',
            height=500,
            barmode='group'
        )
        
        return fig
    
    def plot_biplot(self):
        """–î–≤—É–º–µ—Ä–Ω—ã–π biplot"""
        if self.factor_analyzer is None or self.factor_analyzer.loadings_.shape[1] < 2:
            return None
        
        loadings = self.factor_analyzer.loadings_
        scores = self.factor_analyzer.transform(self.cleaned_data)
        variables = self.cleaned_data.columns
        
        fig = go.Figure()
        
        # –¢–æ—á–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        fig.add_trace(go.Scatter(
            x=scores[:, 0],
            y=scores[:, 1],
            mode='markers',
            marker=dict(size=6, opacity=0.6),
            name='–ù–∞–±–ª—é–¥–µ–Ω–∏—è',
            hovertemplate='–ù–∞–±–ª—é–¥–µ–Ω–∏–µ: %{pointNumber}<br>' +
                         '–§–∞–∫—Ç–æ—Ä 1: %{x:.2f}<br>' +
                         '–§–∞–∫—Ç–æ—Ä 2: %{y:.2f}<extra></extra>'
        ))
        
        # –í–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for i, var in enumerate(variables):
            fig.add_trace(go.Scatter(
                x=[0, loadings[i, 0] * 3],
                y=[0, loadings[i, 1] * 3],
                mode='lines+text',
                line=dict(color='red', width=2),
                text=['', var],
                textposition='top center',
                name=var,
                showlegend=False,
                hovertemplate=f'{var}<br>' +
                             '–ù–∞–≥—Ä—É–∑–∫–∞ –§1: %{x:.3f}<br>' +
                             '–ù–∞–≥—Ä—É–∑–∫–∞ –§2: %{y:.3f}<extra></extra>'
            ))
        
        fig.update_layout(
            title='Biplot - –î–≤—É–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤',
            xaxis_title='–§–∞–∫—Ç–æ—Ä 1',
            yaxis_title='–§–∞–∫—Ç–æ—Ä 2',
            height=600,
            showlegend=True
        )
        
        return fig

def main():
    st.title("üìä –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ê–Ω–∞–ª–æ–≥ SPSS Statistics")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if 'app' not in st.session_state:
        st.session_state.app = FactorAnalysisApp()
    
    app = st.session_state.app
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéØ –¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞")
        goal = st.text_area(
            "–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—ã—è–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            height=100
        )
        
        if goal:
            st.success(f"–¶–µ–ª—å: {goal}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìÅ –î–∞–Ω–Ω—ã–µ", 
        "üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", 
        "üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏", 
        "üìà –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ])
    
    with tab1:
        st.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV",
            type=['csv', 'xlsx', 'xls'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: CSV, XLSX, XLS"
        )
        
        if uploaded_file is not None:
            if app.load_data(uploaded_file):
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", app.data.shape[0])
                with col2:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤", app.data.shape[1])
                
                st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(app.data.head(10))
                
                st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
                buffer = io.StringIO()
                app.data.info(buf=buffer)
                st.text(buffer.getvalue())
    
    with tab2:
        if app.data is not None:
            st.header("–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
                numeric_columns = app.data.select_dtypes(include=[np.number]).columns.tolist()
                selected_columns = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                    numeric_columns,
                    default=numeric_columns
                )
            
            with col2:
                st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏")
                missing_strategy = st.selectbox(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤:",
                    ['mean', 'median', 'drop'],
                    format_func=lambda x: {
                        'mean': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–º',
                        'median': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π',
                        'drop': '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏'
                    }[x]
                )
                
                normalize = st.checkbox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", value=True)
            
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                if selected_columns:
                    if app.clean_data(selected_columns, missing_strategy, normalize):
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("–§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏", app.cleaned_data.shape[0])
                        with col2:
                            st.metric("–§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã", app.cleaned_data.shape[1])
                        with col3:
                            st.metric("–ü—Ä–æ–ø—É—Å–∫–∏", app.cleaned_data.isnull().sum().sum())
                        
                        st.subheader("–û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        st.dataframe(app.cleaned_data.head())
                        
                        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        st.dataframe(app.cleaned_data.describe())
                else:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–∞–Ω–Ω—ã–µ'")
    
    with tab3:
        if app.cleaned_data is not None:
            st.header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å"):
                suitability = app.check_factor_analysis_suitability()
                
                if suitability:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–¢–µ—Å—Ç –ë–∞—Ä—Ç–ª–µ—Ç—Ç–∞ –Ω–∞ —Å—Ñ–µ—Ä–∏—á–Ω–æ—Å—Ç—å")
                        st.metric("œá¬≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{suitability['bartlett_chi2']:.2f}")
                        st.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{suitability['bartlett_p']:.2e}")
                        
                        if suitability['bartlett_p'] < 0.05:
                            st.markdown('<div class="success-box">‚úÖ –¢–µ—Å—Ç –ë–∞—Ä—Ç–ª–µ—Ç—Ç–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (p < 0.05)</div>', unsafe_allow_html=True)
                        else:
                            st.markdown('<div class="error-box">‚ùå –¢–µ—Å—Ç –ë–∞—Ä—Ç–ª–µ—Ç—Ç–∞: –¥–∞–Ω–Ω—ã–µ –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (p ‚â• 0.05)</div>', unsafe_allow_html=True)
                    
                    with col2:
                        st.subheader("–¢–µ—Å—Ç KMO (Kaiser-Meyer-Olkin)")
                        st.metric("KMO –æ–±—â–∏–π", f"{suitability['kmo_model']:.3f}")
                        
                        if suitability['kmo_model'] >= 0.8:
                            kmo_text = "–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å"
                            kmo_class = "success-box"
                        elif suitability['kmo_model'] >= 0.7:
                            kmo_text = "–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å"
                            kmo_class = "success-box"
                        elif suitability['kmo_model'] >= 0.6:
                            kmo_text = "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å"
                            kmo_class = "warning-box"
                        elif suitability['kmo_model'] >= 0.5:
                            kmo_text = "–°–ª–∞–±–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å"
                            kmo_class = "warning-box"
                        else:
                            kmo_text = "–ù–µ–ø—Ä–∏–º–µ–Ω–∏–º–æ"
                            kmo_class = "error-box"
                        
                        st.markdown(f'<div class="{kmo_class}">KMO: {kmo_text}</div>', unsafe_allow_html=True)
                    
                    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                    corr_matrix = app.correlation_matrix()
                    
                    fig, ax = plt.subplots(figsize=(10, 8))
                    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, ax=ax)
                    plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')
                    st.pyplot(fig)
                    plt.close()
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞'")
    
    with tab4:
        if app.cleaned_data is not None:
            st.header("–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PCA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            if st.button("üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (PCA)"):
                if app.perform_pca():
                    st.success("‚úÖ PCA –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    # Scree plot
                    scree_fig = app.plot_scree()
                    if scree_fig:
                        st.plotly_chart(scree_fig, use_container_width=True)
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    eigenvalues = app.get_eigenvalues()
                    explained_variance = app.pca_model.explained_variance_ratio_
                    cumulative_variance = np.cumsum(explained_variance)
                    
                    results_df = pd.DataFrame({
                        '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞': range(1, len(eigenvalues) + 1),
                        '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': eigenvalues,
                        '–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (%)': explained_variance * 100,
                        '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (%)': cumulative_variance * 100
                    })
                    
                    st.subheader("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è")
                    st.dataframe(results_df)
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                    kaiser_factors = np.sum(eigenvalues > 1)
                    st.info(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –ö–∞–π–∑–µ—Ä–∞: {kaiser_factors}")
            
            st.markdown("---")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            col1, col2, col3 = st.columns(3)
            
            with col1:
                n_factors = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:",
                    min_value=1,
                    max_value=min(10, app.cleaned_data.shape[1]-1) if app.cleaned_data is not None else 5,
                    value=3
                )
            
            with col2:
                method = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:",
                    ['principal', 'ml'],
                    format_func=lambda x: {
                        'principal': '–ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (PCA)',
                        'ml': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–µ'
                    }[x]
                )
            
            with col3:
                rotation = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –≤—Ä–∞—â–µ–Ω–∏—è:",
                    ['varimax', 'oblimin', 'quartimax'],
                    format_func=lambda x: {
                        'varimax': 'Varimax (–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–µ)',
                        'oblimin': 'Oblimin (–Ω–∞–∫–ª–æ–Ω–Ω–æ–µ)',
                        'quartimax': 'Quartimax (–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–µ)'
                    }[x]
                )
            
            if st.button("üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
                if app.perform_factor_analysis(n_factors, method, rotation):
                    st.success("‚úÖ –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
                    loadings_fig = app.plot_factor_loadings()
                    if loadings_fig:
                        st.plotly_chart(loadings_fig, use_container_width=True)
                    
                    # Biplot
                    if n_factors >= 2:
                        biplot_fig = app.plot_biplot()
                        if biplot_fig:
                            st.plotly_chart(biplot_fig, use_container_width=True)
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞'")
    
    with tab5:
        if app.factor_analyzer is not None:
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
            
            # –ú–∞—Ç—Ä–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
            st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫")
            loadings_df = pd.DataFrame(
                app.factor_analyzer.loadings_,
                columns=[f'–§–∞–∫—Ç–æ—Ä {i+1}' for i in range(app.factor_analyzer.loadings_.shape[1])],
                index=app.cleaned_data.columns
            )
            st.dataframe(loadings_df.round(3))
            
            # –û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è
            st.subheader("–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è")
            if hasattr(app.factor_analyzer, 'get_factor_variance'):
                variance_info = app.factor_analyzer.get_factor_variance()
                variance_df = pd.DataFrame({
                    '–§–∞–∫—Ç–æ—Ä': [f'–§–∞–∫—Ç–æ—Ä {i+1}' for i in range(len(variance_info[0]))],
                    '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': variance_info[0],
                    '–î–∏—Å–ø–µ—Ä—Å–∏—è (%)': variance_info[1] * 100,
                    '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (%)': np.cumsum(variance_info[1]) * 100
                })
                st.dataframe(variance_df.round(3))
                
                total_variance = np.sum(variance_info[1]) * 100
                st.metric("–û–±—â–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è", f"{total_variance:.1f}%")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
            st.info("""
            **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:**
            - –ù–∞–≥—Ä—É–∑–∫–∏ > 0.7 —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–º–∏
            - –ù–∞–≥—Ä—É–∑–∫–∏ 0.4-0.7 —Å—á–∏—Ç–∞—é—Ç—Å—è —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏  
            - –ù–∞–≥—Ä—É–∑–∫–∏ < 0.4 —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∏–∑–∫–∏–º–∏
            
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –Ω–∞–π–¥–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏ 
            –∏ –¥–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ñ–∞–∫—Ç–æ—Ä–∞.
            """)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏")
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏"):
                factor_scores = app.factor_analyzer.transform(app.cleaned_data)
                scores_df = pd.DataFrame(
                    factor_scores,
                    columns=[f'–§–∞–∫—Ç–æ—Ä {i+1}' for i in range(factor_scores.shape[1])]
                )
                st.dataframe(scores_df.head(10))
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                csv = scores_df.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (CSV)",
                    data=csv,
                    file_name="factor_scores.csv",
                    mime="text/csv"
                )
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ '–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑'")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>üìä –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ê–Ω–∞–ª–æ–≥ SPSS Statistics | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ Python + Streamlit</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
