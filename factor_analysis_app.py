import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from factor_analyzer import FactorAnalyzer
from factor_analyzer.factor_analyzer import calculate_bartlett_sphericity, calculate_kmo
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ê–Ω–∞–ª–æ–≥ SPSS",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        color: #2c3e50;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #3498db;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

class FactorAnalysisApp:
    def __init__(self):
        self.data = None
        self.processed_data = None
        self.scaler = StandardScaler()
        self.imputer = SimpleImputer(strategy='mean')
        
    def load_data(self, file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if file.name.endswith('.csv'):
                self.data = pd.read_csv(file)
            elif file.name.endswith(('.xlsx', '.xls')):
                self.data = pd.read_excel(file)
            else:
                st.error("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã CSV –∏ Excel")
                return False
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return False
    
    def preprocess_data(self, handle_missing='mean', normalize=True, selected_columns=None):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.data is None:
            return False
        
        # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
        if selected_columns:
            numeric_data = self.data[selected_columns]
        else:
            numeric_data = self.data.select_dtypes(include=[np.number])
        
        if numeric_data.empty:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return False
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        if handle_missing == 'mean':
            self.imputer.set_params(strategy='mean')
        elif handle_missing == 'median':
            self.imputer.set_params(strategy='median')
        elif handle_missing == 'drop':
            numeric_data = numeric_data.dropna()
        
        if handle_missing != 'drop':
            numeric_data = pd.DataFrame(
                self.imputer.fit_transform(numeric_data),
                columns=numeric_data.columns
            )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if normalize:
            self.processed_data = pd.DataFrame(
                self.scaler.fit_transform(numeric_data),
                columns=numeric_data.columns
            )
        else:
            self.processed_data = numeric_data
        
        return True
    
    def calculate_correlation_matrix(self):
        """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
        if self.processed_data is None:
            return None
        return self.processed_data.corr()
    
    def perform_pca(self, n_components=None):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ PCA –∞–Ω–∞–ª–∏–∑–∞"""
        if self.processed_data is None:
            return None, None
        
        if n_components is None:
            n_components = min(self.processed_data.shape)
        
        pca = PCA(n_components=n_components)
        pca_result = pca.fit_transform(self.processed_data)
        
        return pca, pca_result
    
    def perform_factor_analysis(self, n_factors, rotation='varimax'):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.processed_data is None:
            return None
        
        fa = FactorAnalyzer(n_factors=n_factors, rotation=rotation)
        fa.fit(self.processed_data)
        
        return fa
    
    def calculate_adequacy_tests(self):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ (KMO –∏ –ë–∞—Ä–ª–µ—Ç—Ç–∞)"""
        if self.processed_data is None:
            return None, None
        
        # –¢–µ—Å—Ç –ë–∞—Ä–ª–µ—Ç—Ç–∞
        chi_square, p_value = calculate_bartlett_sphericity(self.processed_data)
        
        # KMO —Ç–µ—Å—Ç
        kmo_all, kmo_model = calculate_kmo(self.processed_data)
        
        return (chi_square, p_value), (kmo_all, kmo_model)

def main():
    st.markdown('<h1 class="main-header">üìä –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ê–Ω–∞–ª–æ–≥ SPSS Statistics</h1>', 
                unsafe_allow_html=True)
    
    app = FactorAnalysisApp()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (CSV –∏–ª–∏ Excel)",
        type=['csv', 'xlsx', 'xls'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    if uploaded_file is not None:
        if app.load_data(uploaded_file):
            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
            st.markdown('<h2 class="section-header">üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö</h2>', 
                       unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", app.data.shape[0])
            with col2:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤", app.data.shape[1])
            with col3:
                numeric_cols = len(app.data.select_dtypes(include=[np.number]).columns)
                st.metric("–ß–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤", numeric_cols)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
            st.dataframe(app.data.head(), use_container_width=True)
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            st.sidebar.markdown("### üéØ –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            numeric_columns = app.data.select_dtypes(include=[np.number]).columns.tolist()
            
            if numeric_columns:
                selected_columns = st.sidebar.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                    numeric_columns,
                    default=numeric_columns[:min(10, len(numeric_columns))],
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                )
                
                if selected_columns:
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
                    st.sidebar.markdown("### ‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                    
                    handle_missing = st.sidebar.selectbox(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤",
                        ['mean', 'median', 'drop'],
                        format_func=lambda x: {
                            'mean': '–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–º',
                            'median': '–ó–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π',
                            'drop': '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏'
                        }[x]
                    )
                    
                    normalize_data = st.sidebar.checkbox(
                        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                        value=True,
                        help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                    )
                    
                    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if app.preprocess_data(handle_missing, normalize_data, selected_columns):
                        
                        # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        st.markdown('<h2 class="section-header">üìà –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>', 
                                   unsafe_allow_html=True)
                        st.dataframe(app.processed_data.describe(), use_container_width=True)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
                        missing_info = app.data[selected_columns].isnull().sum()
                        if missing_info.sum() > 0:
                            st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {missing_info.sum()} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                            st.dataframe(missing_info[missing_info > 0], use_container_width=True)
                        
                        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
                        st.markdown('<h2 class="section-header">üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞</h2>', 
                                   unsafe_allow_html=True)
                        
                        corr_matrix = app.calculate_correlation_matrix()
                        
                        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                        fig_corr = px.imshow(
                            corr_matrix,
                            text_auto=True,
                            aspect="auto",
                            color_continuous_scale='RdBu_r',
                            title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"
                        )
                        fig_corr.update_traces(texttemplate="%{z:.2f}", textfont_size=10)
                        st.plotly_chart(fig_corr, use_container_width=True)
                        
                        # –¢–µ—Å—Ç—ã –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏
                        st.markdown('<h2 class="section-header">‚úÖ –¢–µ—Å—Ç—ã –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏</h2>', 
                                   unsafe_allow_html=True)
                        
                        bartlett_test, kmo_test = app.calculate_adequacy_tests()
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**–¢–µ—Å—Ç –ë–∞—Ä–ª–µ—Ç—Ç–∞**")
                            chi_square, p_value = bartlett_test
                            st.metric("Chi-square", f"{chi_square:.3f}")
                            st.metric("p-value", f"{p_value:.6f}")
                            if p_value < 0.05:
                                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                            else:
                                st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                        
                        with col2:
                            st.markdown("**KMO —Ç–µ—Å—Ç**")
                            kmo_all, kmo_model = kmo_test
                            st.metric("KMO –æ–±—â–∏–π", f"{kmo_all:.3f}")
                            
                            if kmo_all >= 0.8:
                                st.success("‚úÖ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ")
                            elif kmo_all >= 0.7:
                                st.success("‚úÖ –•–æ—Ä–æ—à–æ")
                            elif kmo_all >= 0.6:
                                st.warning("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
                            else:
                                st.error("‚ùå –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                        st.sidebar.markdown("### üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                        
                        analysis_type = st.sidebar.selectbox(
                            "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
                            ['PCA', 'Factor Analysis'],
                            help="PCA - –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, Factor Analysis - —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                        )
                        
                        if analysis_type == 'PCA':
                            # PCA –∞–Ω–∞–ª–∏–∑
                            st.markdown('<h2 class="section-header">üîç –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)</h2>', 
                                       unsafe_allow_html=True)
                            
                            pca, pca_result = app.perform_pca()
                            
                            if pca is not None:
                                # Scree plot
                                fig_scree = go.Figure()
                                fig_scree.add_trace(go.Scatter(
                                    x=list(range(1, len(pca.explained_variance_ratio_) + 1)),
                                    y=pca.explained_variance_ratio_,
                                    mode='lines+markers',
                                    name='–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
                                    line=dict(width=3),
                                    marker=dict(size=8)
                                ))
                                fig_scree.update_layout(
                                    title="Scree Plot - –ì—Ä–∞—Ñ–∏–∫ –æ—Å—ã–ø–∏",
                                    xaxis_title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç",
                                    yaxis_title="–î–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏",
                                    hovermode='x'
                                )
                                st.plotly_chart(fig_scree, use_container_width=True)
                                
                                # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è
                                cumsum_var = np.cumsum(pca.explained_variance_ratio_)
                                fig_cum = go.Figure()
                                fig_cum.add_trace(go.Scatter(
                                    x=list(range(1, len(cumsum_var) + 1)),
                                    y=cumsum_var,
                                    mode='lines+markers',
                                    name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è',
                                    line=dict(width=3),
                                    marker=dict(size=8)
                                ))
                                fig_cum.add_hline(y=0.8, line_dash="dash", 
                                                 annotation_text="80% –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
                                fig_cum.update_layout(
                                    title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è",
                                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
                                    yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏"
                                )
                                st.plotly_chart(fig_cum, use_container_width=True)
                                
                                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                                n_components_80 = np.argmax(cumsum_var >= 0.8) + 1
                                st.info(f"üí° –î–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è 80% –¥–∏—Å–ø–µ—Ä—Å–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è {n_components_80} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
                                
                                # –ù–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                                components_df = pd.DataFrame(
                                    pca.components_[:5].T,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                                    columns=[f'PC{i+1}' for i in range(min(5, pca.n_components_))],
                                    index=selected_columns
                                )
                                
                                st.markdown("**–ù–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç**")
                                st.dataframe(components_df.round(3), use_container_width=True)
                                
                                # Biplot
                                if len(selected_columns) <= 20:  # –î–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                                    fig_biplot = go.Figure()
                                    
                                    # –¢–æ—á–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                                    fig_biplot.add_trace(go.Scatter(
                                        x=pca_result[:, 0],
                                        y=pca_result[:, 1],
                                        mode='markers',
                                        name='–ù–∞–±–ª—é–¥–µ–Ω–∏—è',
                                        marker=dict(size=5, opacity=0.6),
                                        showlegend=True
                                    ))
                                    
                                    # –í–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                                    for i, var in enumerate(selected_columns):
                                        fig_biplot.add_trace(go.Scatter(
                                            x=[0, pca.components_[0, i] * 3],
                                            y=[0, pca.components_[1, i] * 3],
                                            mode='lines+text',
                                            name=var,
                                            text=['', var],
                                            textposition='top center',
                                            line=dict(width=2),
                                            showlegend=False
                                        ))
                                    
                                    fig_biplot.update_layout(
                                        title="Biplot - –ü–µ—Ä–≤—ã–µ –¥–≤–µ –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                                        xaxis_title=f"PC1 ({pca.explained_variance_ratio_[0]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)",
                                        yaxis_title=f"PC2 ({pca.explained_variance_ratio_[1]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)"
                                    )
                                    st.plotly_chart(fig_biplot, use_container_width=True)
                        
                        else:
                            # –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            st.markdown('<h2 class="section-header">üî¨ –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h2>', 
                                       unsafe_allow_html=True)
                            
                            n_factors = st.sidebar.slider(
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
                                min_value=1,
                                max_value=min(10, len(selected_columns)-1),
                                value=min(3, len(selected_columns)-1),
                                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
                            )
                            
                            rotation = st.sidebar.selectbox(
                                "–¢–∏–ø –≤—Ä–∞—â–µ–Ω–∏—è",
                                ['varimax', 'promax', 'oblimin', 'oblimax', 'quartimin'],
                                help="Varimax - –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
                            )
                            
                            fa = app.perform_factor_analysis(n_factors, rotation)
                            
                            if fa is not None:
                                # –§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
                                loadings_df = pd.DataFrame(
                                    fa.loadings_,
                                    columns=[f'–§–∞–∫—Ç–æ—Ä {i+1}' for i in range(n_factors)],
                                    index=selected_columns
                                )
                                
                                st.markdown("**–ú–∞—Ç—Ä–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫**")
                                st.dataframe(loadings_df.round(3), use_container_width=True)
                                
                                # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–≥—Ä—É–∑–æ–∫
                                fig_loadings = px.imshow(
                                    loadings_df.T,
                                    text_auto=True,
                                    aspect="auto",
                                    color_continuous_scale='RdBu_r',
                                    title="–ú–∞—Ç—Ä–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫"
                                )
                                fig_loadings.update_traces(texttemplate="%{z:.2f}", textfont_size=10)
                                st.plotly_chart(fig_loadings, use_container_width=True)
                                
                                # –ö–æ–º–º—É–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                                communalities = pd.DataFrame({
                                    '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è': selected_columns,
                                    '–ö–æ–º–º—É–Ω–∞–ª—å–Ω–æ—Å—Ç—å': fa.get_communalities()
                                })
                                
                                st.markdown("**–ö–æ–º–º—É–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö**")
                                st.dataframe(communalities.round(3), use_container_width=True)
                                
                                # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                eigenvalues = fa.get_eigenvalues()[0]
                                
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.markdown("**–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤**")
                                    eigenvals_df = pd.DataFrame({
                                        '–§–∞–∫—Ç–æ—Ä': [f'–§–∞–∫—Ç–æ—Ä {i+1}' for i in range(len(eigenvalues))],
                                        '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': eigenvalues,
                                        '–î–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏': eigenvalues / len(selected_columns)
                                    })
                                    st.dataframe(eigenvals_df.round(3), use_container_width=True)
                                
                                with col2:
                                    # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                                    fig_eigen = go.Figure()
                                    fig_eigen.add_trace(go.Bar(
                                        x=[f'F{i+1}' for i in range(len(eigenvalues))],
                                        y=eigenvalues,
                                        name='–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'
                                    ))
                                    fig_eigen.add_hline(y=1, line_dash="dash", 
                                                       annotation_text="–ö—Ä–∏—Ç–µ—Ä–∏–π –ö–∞–π–∑–µ—Ä–∞")
                                    fig_eigen.update_layout(
                                        title="–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
                                        xaxis_title="–§–∞–∫—Ç–æ—Ä",
                                        yaxis_title="–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                                    )
                                    st.plotly_chart(fig_eigen, use_container_width=True)
                        
                        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.markdown('<h2 class="section-header">üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>', 
                                   unsafe_allow_html=True)
                        
                        if st.button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"):
                            # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                            output = io.BytesIO()
                            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                                # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                app.data.to_excel(writer, sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                                
                                # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                app.processed_data.to_excel(writer, sheet_name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
                                
                                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
                                corr_matrix.to_excel(writer, sheet_name='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
                                
                                if analysis_type == 'PCA' and pca is not None:
                                    # PCA —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    components_df.to_excel(writer, sheet_name='PCA –Ω–∞–≥—Ä—É–∑–∫–∏')
                                    
                                    # –û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è
                                    var_df = pd.DataFrame({
                                        '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç': [f'PC{i+1}' for i in range(len(pca.explained_variance_ratio_))],
                                        '–î–∏—Å–ø–µ—Ä—Å–∏—è': pca.explained_variance_ratio_,
                                        '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è': np.cumsum(pca.explained_variance_ratio_)
                                    })
                                    var_df.to_excel(writer, sheet_name='PCA –¥–∏—Å–ø–µ—Ä—Å–∏—è', index=False)
                                
                                elif analysis_type == 'Factor Analysis' and fa is not None:
                                    # –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    loadings_df.to_excel(writer, sheet_name='–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏')
                                    communalities.to_excel(writer, sheet_name='–ö–æ–º–º—É–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', index=False)
                                    eigenvals_df.to_excel(writer, sheet_name='–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', index=False)
                            
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
                                data=output.getvalue(),
                                file_name=f"factor_analysis_results_{analysis_type.lower()}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                
                else:
                    st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            else:
                st.error("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        st.markdown('<h2 class="section-header">üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h2>', 
                   unsafe_allow_html=True)
        
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ**: –í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        2. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ**: –û—Ç–º–µ—Ç—å—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        3. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É**: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å**: –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ë–∞—Ä–ª–µ—Ç—Ç–∞ –∏ KMO
        5. **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞**: PCA –∏–ª–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        6. **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: –ò–∑—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã
        7. **–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: –°–∫–∞—á–∞–π—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        - **KMO > 0.7** - –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        - **p-value —Ç–µ—Å—Ç–∞ –ë–∞—Ä–ª–µ—Ç—Ç–∞ < 0.05** - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–∏–º—ã
        - **–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è > 1** - –∫—Ä–∏—Ç–µ—Ä–∏–π –ö–∞–π–∑–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        - **80% –¥–∏—Å–ø–µ—Ä—Å–∏–∏** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è PCA
        """)

if __name__ == "__main__":
    main()